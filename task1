import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk
import tensorflow as tf
import numpy as np
import os
import json

class ImageClassifierApp(tk.Tk):
    def __init__(self, model_path, labels_path):
        super().__init__()
        self.title("Assignment 3 Task 1")
        self.geometry("800x600")

        self.model_path = model_path #path to model file
        self.labels_path = labels_path #path to model label
        self.model = self.load_model() #model load
        self.labels = self.load_labels() #load label
        self.image_path = None

        self.image_label = tk.Label(self, text="No Image Loaded")
        self.image_label.pack(pady=20)

        load_button = tk.Button(self, text="Load Image", command=self.load_image)
        load_button.pack(pady=20)

        classify_button = tk.Button(self, text="Classify Image", command=self.classify_image)
        classify_button.pack(pady=20)

        self.result_label = tk.Label(self, text="")
        self.result_label.pack(pady=20)

    def load_model(self):
        try:
            if not os.path.exists(self.model_path):
                raise FileNotFoundError(f"Model file not found: {self.model_path}") #model load file not found error
            return tf.keras.models.load_model(self.model_path)
        except Exception as e:
            print(f"Error loading model: {e}")
            raise

    def load_labels(self): #model label load class
        try:
            with open(self.labels_path, 'r') as f: 
                return json.load(f)
        except Exception as e:
            print(f"Error loading labels: {e}")
            raise

    def load_image(self):
        file_path = filedialog.askopenfilename()
        if file_path:
            self.image_path = file_path
            img = Image.open(file_path).convert('RGB')  # Convert to RGB
            img = img.resize((224, 224), Image.LANCZOS) #resize image
            img = ImageTk.PhotoImage(img) #update image label with the loaded image
            self.image_label.config(image=img, text="") 
            self.image_label.image = img

    def classify_image(self):
        try:
            if self.image_path is None:
                raise ValueError("No image path set")
            img = Image.open(self.image_path).convert('RGB') 
            img = img.resize((224, 224))
            img_array = np.array(img) / 255.0 #normalize the img
            img_array = np.expand_dims(img_array, axis=0)#add dimention

            predictions = self.model.predict(img_array) #predict the image
            class_idx = np.argmax(predictions[0]) #get the index of highest probability
            class_label = self.labels[str(class_idx)][1]
            result = f"Class {class_idx}: {class_label}"#fomat the result
            self.result_label.config(text=result) #display the result
        except ValueError as e:
            self.show_error(str(e))
        except Exception as e:
            self.show_error(f"An error occurred: {str(e)}")

    def show_error(self, message):
        messagebox.showerror("Error", message)

if __name__ == "__main__":
    model_path = '/Users/admin/Sami/Study CDU/HIT 137/mobilenet_v2.h5'  #  path to  model file
    labels_path = '/Users/admin/Sami/Study CDU/HIT 137/imagenet_class_index.json'  # path to the labels file
    try:
        app = ImageClassifierApp(model_path, labels_path)
        app.mainloop()
    except Exception as e:
        print(f"Failed to start the application: {e}")
